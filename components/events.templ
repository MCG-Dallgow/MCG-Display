package components

import "time"
import "slices"
import "strings"

import . "github.com/mcg-dallgow/mcg-display/types"

templ Events(events map[string][]Event) {
	@Layout(eventsMain(events))
}

templ eventsMain(events map[string][]Event) {
	<div class="flex h-full space-x-3 px-3 pb-3">
		for _, date := range getDates(events) {
			<div class="w-1/5 text-slate-700">
				<div class="px-4 py-4 text-center">
					<p class="text-2xl font-bold">
						{ getWeekday(parseDate(date)) }
					</p>
					<p class="text-xl">
						{ parseDate(date).Format("02.01.2006") }
					</p>
				</div>
				<div class="flex-col space-y-3">
					for _, event := range events[date] {
						@eventBox(event)
					}
				</div>
			</div>
		}
	</div>
}

// DO NOT REMOVE - colors for event categories - comments needed for Tailwind
// Öffentlich/AG:     bg-emerald-400  bg-[#D6E4E1]
// Prüfung:           bg-rose-400     bg-[#E7D8DD]
// Lernende/SekI+II:  bg-amber-400    bg-[#E8E2DB]
// Lehrkräfte:        bg-sky-400      bg-[#D6E1ED]
templ eventBox(event Event) {
	<div class={ "hyphens-auto rounded-xl px-3 py-3 bg-" + event.Category.BackgroundColor() }>
		<div class="flex">
			<div class={ "min-w-3 mr-2 rounded-xl bg-" + event.Category.Color() }></div>
			<div class="w-full pr-1">
				<div class="flex justify-between text-lg">
					<p>
						if !event.FullDay {
							{ event.Start.Format("15:04") + " - " + event.End.Format("15:04") }
						}
					</p>
					<p>{ event.Location }</p>
				</div>
				<p class="py-0.5 text-xl font-bold">{ event.Title }</p>
				if len(event.Description) < 75 {
					<p class="text-lg">
						for i, line := range strings.Split(event.Description, "\n") {
							if i > 0 {
								<br/>
							}
							{ line }
						}
					</p>
				}
			</div>
		</div>
	</div>
}

func getDates(events map[string][]Event) (dates []string) {
	dates = make([]string, 0)
	for date, dayEvents := range events {
		if len(dates) >= 5 {
			break
		}
		weekday := parseDate(date).Weekday()
		if len(dayEvents) > 0 || weekday != 0 && weekday != 6 {
			dates = append(dates, date)
		}
	}
	slices.Sort(dates)
	return dates
}

func parseDate(text string) (date time.Time) {
	date, _ = time.Parse("2006-01-02", text)
	return date
}

func getWeekday(date time.Time) string {
	weekdaysGer := []string{
		"Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag",
	}

	return weekdaysGer[date.Weekday()]
}
